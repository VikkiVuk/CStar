// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CStarLexer.flex

/* Import necessary IntelliJ packages */
import com.intellij.psi.tree.IElementType;
import xyz.vikkivuk.cstarplugin.psi.CStarTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;

public class CStarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\3\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\0\1\20\12\21\1\0\1\22\1\23"+
    "\1\24\1\25\2\0\23\26\1\27\6\26\1\30\1\0"+
    "\1\31\1\0\1\26\1\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\26\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\26\1\51\1\52\1\53"+
    "\1\54\1\26\1\55\1\56\1\57\1\26\1\60\1\0"+
    "\1\61\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\17\21"+
    "\1\24\1\25\1\26\1\0\1\27\3\0\1\30\1\31"+
    "\1\32\1\33\6\21\1\34\5\21\1\35\2\21\1\36"+
    "\5\21\1\37\4\21\2\0\1\40\3\21\1\41\11\21"+
    "\1\42\13\21\1\43\1\4\2\21\1\44\1\45\1\46"+
    "\1\47\1\50\1\21\1\51\1\21\1\52\1\53\4\21"+
    "\1\54\1\21\1\55\1\21\1\56\1\21\1\57\3\21"+
    "\1\60\2\21\1\61\2\21\1\62\4\21\1\63\1\21"+
    "\1\64\1\21\1\65\1\66\1\21\1\67\1\70\1\71"+
    "\3\21\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\62\0\62\0\62\0\62\0\62\0\u01f4"+
    "\0\u0226\0\62\0\u0258\0\u028a\0\u02bc\0\u02ee\0\62\0\62"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\62"+
    "\0\62\0\u015e\0\u012c\0\62\0\u0190\0\u060e\0\u0640\0\62"+
    "\0\62\0\62\0\62\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u02ee\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u02ee\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u02ee\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u02ee"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u02ee\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u02ee\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"+
    "\0\u0fa0\0\u02ee\0\62\0\u0fd2\0\u1004\0\u02ee\0\u02ee\0\u02ee"+
    "\0\u02ee\0\u02ee\0\u1036\0\u02ee\0\u1068\0\u02ee\0\u02ee\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u02ee\0\u1162\0\u02ee\0\u1194\0\u02ee"+
    "\0\u11c6\0\u02ee\0\u11f8\0\u122a\0\u125c\0\u02ee\0\u128e\0\u12c0"+
    "\0\u02ee\0\u12f2\0\u1324\0\u02ee\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u02ee\0\u141e\0\u02ee\0\u1450\0\u02ee\0\u02ee\0\u1482\0\u02ee"+
    "\0\u02ee\0\u02ee\0\u14b4\0\u14e6\0\u1518\0\u02ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\30\1\31\1\32\2\26\1\33\1\34\2\26\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\26\1\44"+
    "\1\45\1\26\1\46\1\26\1\47\1\50\1\51\63\0"+
    "\1\3\3\0\1\3\56\0\1\4\1\0\2\4\55\0"+
    "\1\3\1\4\1\0\1\4\1\5\54\0\2\10\1\0"+
    "\21\10\1\52\35\10\2\53\1\0\4\53\1\54\52\53"+
    "\2\10\1\0\57\10\2\55\1\0\6\55\1\54\50\55"+
    "\14\0\1\56\61\0\1\57\3\0\1\10\62\0\1\21"+
    "\64\0\1\60\61\0\1\61\1\62\60\0\1\63\56\0"+
    "\1\26\4\0\2\26\2\0\26\26\23\0\1\26\4\0"+
    "\2\26\2\0\14\26\1\64\4\26\1\65\4\26\23\0"+
    "\1\26\4\0\2\26\2\0\22\26\1\66\3\26\23\0"+
    "\1\26\4\0\2\26\2\0\1\67\13\26\1\70\11\26"+
    "\23\0\1\26\4\0\2\26\2\0\17\26\1\71\6\26"+
    "\23\0\1\26\4\0\2\26\2\0\14\26\1\72\11\26"+
    "\23\0\1\26\4\0\2\26\2\0\10\26\1\73\15\26"+
    "\23\0\1\26\4\0\2\26\2\0\10\26\1\74\4\26"+
    "\1\75\10\26\23\0\1\26\4\0\2\26\2\0\1\76"+
    "\25\26\23\0\1\26\4\0\2\26\2\0\4\26\1\77"+
    "\10\26\1\100\4\26\1\101\3\26\23\0\1\26\4\0"+
    "\2\26\2\0\15\26\1\102\1\26\1\103\6\26\23\0"+
    "\1\26\4\0\2\26\2\0\4\26\1\104\12\26\1\105"+
    "\6\26\23\0\1\26\4\0\2\26\2\0\4\26\1\106"+
    "\15\26\1\107\3\26\23\0\1\26\4\0\2\26\2\0"+
    "\1\110\14\26\1\111\1\26\1\112\6\26\23\0\1\26"+
    "\4\0\2\26\2\0\7\26\1\113\1\114\15\26\23\0"+
    "\1\26\4\0\2\26\2\0\4\26\1\115\21\26\2\0"+
    "\14\56\1\116\45\56\14\57\1\117\45\57\21\0\1\26"+
    "\4\0\2\26\2\0\3\26\1\120\22\26\23\0\1\26"+
    "\4\0\2\26\2\0\21\26\1\121\4\26\23\0\1\26"+
    "\4\0\2\26\2\0\13\26\1\122\12\26\23\0\1\26"+
    "\4\0\2\26\2\0\2\26\1\123\23\26\23\0\1\26"+
    "\4\0\2\26\2\0\3\26\1\124\22\26\23\0\1\26"+
    "\4\0\2\26\2\0\4\26\1\125\10\26\1\126\10\26"+
    "\23\0\1\26\4\0\2\26\2\0\12\26\1\127\13\26"+
    "\23\0\1\26\4\0\2\26\2\0\20\26\1\130\1\131"+
    "\4\26\23\0\1\26\4\0\2\26\2\0\2\26\1\132"+
    "\23\26\23\0\1\26\4\0\2\26\2\0\17\26\1\133"+
    "\6\26\23\0\1\26\4\0\2\26\2\0\24\26\1\134"+
    "\1\26\23\0\1\26\4\0\2\26\2\0\14\26\1\135"+
    "\11\26\23\0\1\26\4\0\2\26\2\0\13\26\1\136"+
    "\12\26\23\0\1\26\4\0\2\26\2\0\16\26\1\137"+
    "\7\26\23\0\1\26\4\0\2\26\2\0\17\26\1\140"+
    "\6\26\23\0\1\26\4\0\2\26\2\0\10\26\1\141"+
    "\15\26\23\0\1\26\4\0\2\26\2\0\12\26\1\142"+
    "\1\26\1\143\11\26\23\0\1\26\4\0\2\26\2\0"+
    "\16\26\1\144\7\26\23\0\1\26\4\0\2\26\2\0"+
    "\20\26\1\145\5\26\23\0\1\26\4\0\2\26\2\0"+
    "\22\26\1\146\3\26\23\0\1\26\4\0\2\26\2\0"+
    "\4\26\1\147\3\26\1\150\15\26\23\0\1\26\4\0"+
    "\2\26\2\0\21\26\1\151\4\26\23\0\1\26\4\0"+
    "\2\26\2\0\20\26\1\152\5\26\15\0\1\153\66\0"+
    "\1\153\62\0\1\26\4\0\2\26\2\0\4\26\1\154"+
    "\21\26\23\0\1\26\4\0\2\26\2\0\16\26\1\155"+
    "\7\26\23\0\1\26\4\0\2\26\2\0\7\26\1\156"+
    "\16\26\23\0\1\26\4\0\2\26\2\0\4\26\1\157"+
    "\21\26\23\0\1\26\4\0\2\26\2\0\13\26\1\160"+
    "\12\26\23\0\1\26\4\0\2\26\2\0\12\26\1\161"+
    "\13\26\23\0\1\26\4\0\2\26\2\0\21\26\1\162"+
    "\4\26\23\0\1\26\4\0\2\26\2\0\4\26\1\163"+
    "\21\26\23\0\1\26\4\0\2\26\2\0\11\26\1\164"+
    "\14\26\23\0\1\26\4\0\2\26\2\0\2\26\1\165"+
    "\23\26\23\0\1\26\4\0\2\26\2\0\21\26\1\166"+
    "\4\26\23\0\1\26\4\0\2\26\2\0\4\26\1\167"+
    "\21\26\23\0\1\26\4\0\2\26\2\0\20\26\1\170"+
    "\5\26\23\0\1\26\4\0\2\26\2\0\7\26\1\171"+
    "\16\26\23\0\1\26\4\0\2\26\2\0\14\26\1\172"+
    "\11\26\23\0\1\26\4\0\2\26\2\0\4\26\1\173"+
    "\21\26\23\0\1\26\4\0\2\26\2\0\3\26\1\174"+
    "\22\26\23\0\1\26\4\0\2\26\2\0\16\26\1\175"+
    "\7\26\23\0\1\26\4\0\2\26\2\0\11\26\1\176"+
    "\14\26\23\0\1\26\4\0\2\26\2\0\21\26\1\177"+
    "\4\26\23\0\1\26\4\0\2\26\2\0\14\26\1\200"+
    "\11\26\23\0\1\26\4\0\2\26\2\0\12\26\1\201"+
    "\13\26\23\0\1\26\4\0\2\26\2\0\7\26\1\202"+
    "\16\26\23\0\1\26\4\0\2\26\2\0\13\26\1\203"+
    "\12\26\23\0\1\26\4\0\2\26\2\0\10\26\1\204"+
    "\15\26\23\0\1\26\4\0\2\26\2\0\17\26\1\205"+
    "\6\26\23\0\1\26\4\0\2\26\2\0\7\26\1\206"+
    "\16\26\23\0\1\26\4\0\2\26\2\0\10\26\1\207"+
    "\15\26\23\0\1\26\4\0\2\26\2\0\1\210\25\26"+
    "\23\0\1\26\4\0\2\26\2\0\21\26\1\211\4\26"+
    "\23\0\1\26\4\0\2\26\2\0\2\26\1\212\23\26"+
    "\23\0\1\26\4\0\2\26\2\0\15\26\1\213\10\26"+
    "\23\0\1\26\4\0\2\26\2\0\7\26\1\214\16\26"+
    "\23\0\1\26\4\0\2\26\2\0\20\26\1\215\5\26"+
    "\23\0\1\26\4\0\2\26\2\0\16\26\1\216\7\26"+
    "\23\0\1\26\4\0\2\26\2\0\14\26\1\217\11\26"+
    "\23\0\1\26\4\0\2\26\2\0\1\220\25\26\23\0"+
    "\1\26\4\0\2\26\2\0\4\26\1\221\21\26\23\0"+
    "\1\26\4\0\2\26\2\0\16\26\1\222\7\26\23\0"+
    "\1\26\4\0\2\26\2\0\21\26\1\223\4\26\23\0"+
    "\1\26\4\0\2\26\2\0\20\26\1\224\5\26\23\0"+
    "\1\26\4\0\2\26\2\0\21\26\1\225\4\26\23\0"+
    "\1\26\4\0\2\26\2\0\21\26\1\226\4\26\23\0"+
    "\1\26\4\0\2\26\2\0\6\26\1\227\17\26\23\0"+
    "\1\26\4\0\2\26\2\0\12\26\1\230\13\26\23\0"+
    "\1\26\4\0\2\26\2\0\20\26\1\231\5\26\23\0"+
    "\1\26\4\0\2\26\2\0\4\26\1\232\21\26\23\0"+
    "\1\26\4\0\1\26\1\233\2\0\26\26\23\0\1\26"+
    "\4\0\2\26\2\0\7\26\1\234\16\26\23\0\1\26"+
    "\4\0\2\26\2\0\1\235\25\26\23\0\1\26\4\0"+
    "\2\26\2\0\21\26\1\236\4\26\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5450];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\5\11\2\1\1\11\4\1\2\11"+
    "\17\1\2\11\1\1\1\0\1\11\3\0\4\11\32\1"+
    "\2\0\33\1\1\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CStarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Unknown input: " + yytext()); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 59: break;
          case 2:
            { return CStarTypes.INDENT;
            }
          // fall through
          case 60: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 61: break;
          case 4:
            { return CStarTypes.COMMENT;
            }
          // fall through
          case 62: break;
          case 5:
            { return CStarTypes.LPAREN;
            }
          // fall through
          case 63: break;
          case 6:
            { return CStarTypes.RPAREN;
            }
          // fall through
          case 64: break;
          case 7:
            { return CStarTypes.MULT;
            }
          // fall through
          case 65: break;
          case 8:
            { return CStarTypes.PLUS;
            }
          // fall through
          case 66: break;
          case 9:
            { return CStarTypes.COMMA;
            }
          // fall through
          case 67: break;
          case 10:
            { return CStarTypes.MINUS;
            }
          // fall through
          case 68: break;
          case 11:
            { return CStarTypes.DIV;
            }
          // fall through
          case 69: break;
          case 12:
            { return CStarTypes.NUMBER;
            }
          // fall through
          case 70: break;
          case 13:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 14:
            { return CStarTypes.LT;
            }
          // fall through
          case 72: break;
          case 15:
            { return CStarTypes.ASSIGN_OP;
            }
          // fall through
          case 73: break;
          case 16:
            { return CStarTypes.GT;
            }
          // fall through
          case 74: break;
          case 17:
            { return CStarTypes.IDENTIFIER;
            }
          // fall through
          case 75: break;
          case 18:
            { return CStarTypes.LBRACKET;
            }
          // fall through
          case 76: break;
          case 19:
            { return CStarTypes.RBRACKET;
            }
          // fall through
          case 77: break;
          case 20:
            { return CStarTypes.LBRACE;
            }
          // fall through
          case 78: break;
          case 21:
            { return CStarTypes.RBRACE;
            }
          // fall through
          case 79: break;
          case 22:
            { return CStarTypes.NEQ;
            }
          // fall through
          case 80: break;
          case 23:
            { return CStarTypes.STRING;
            }
          // fall through
          case 81: break;
          case 24:
            { return CStarTypes.LTE;
            }
          // fall through
          case 82: break;
          case 25:
            { return CStarTypes.EQ;
            }
          // fall through
          case 83: break;
          case 26:
            { return CStarTypes.ARROW;
            }
          // fall through
          case 84: break;
          case 27:
            { return CStarTypes.GTE;
            }
          // fall through
          case 85: break;
          case 28:
            { return CStarTypes.IN;
            }
          // fall through
          case 86: break;
          case 29:
            { return CStarTypes.NO;
            }
          // fall through
          case 87: break;
          case 30:
            { return CStarTypes.OR;
            }
          // fall through
          case 88: break;
          case 31:
            { return CStarTypes.TO;
            }
          // fall through
          case 89: break;
          case 32:
            { return CStarTypes.AND;
            }
          // fall through
          case 90: break;
          case 33:
            { return CStarTypes.END;
            }
          // fall through
          case 91: break;
          case 34:
            { return CStarTypes.NUM;
            }
          // fall through
          case 92: break;
          case 35:
            { return CStarTypes.YES;
            }
          // fall through
          case 93: break;
          case 36:
            { return CStarTypes.EACH;
            }
          // fall through
          case 94: break;
          case 37:
            { return CStarTypes.FREE;
            }
          // fall through
          case 95: break;
          case 38:
            { return CStarTypes.FROM;
            }
          // fall through
          case 96: break;
          case 39:
            { return CStarTypes.KILL;
            }
          // fall through
          case 97: break;
          case 40:
            { return CStarTypes.LIST;
            }
          // fall through
          case 98: break;
          case 41:
            { return CStarTypes.LOCK;
            }
          // fall through
          case 99: break;
          case 42:
            { return CStarTypes.NEXT;
            }
          // fall through
          case 100: break;
          case 43:
            { return CStarTypes.NONE;
            }
          // fall through
          case 101: break;
          case 44:
            { return CStarTypes.SEND;
            }
          // fall through
          case 102: break;
          case 45:
            { return CStarTypes.TASK;
            }
          // fall through
          case 103: break;
          case 46:
            { return CStarTypes.CASE;
            }
          // fall through
          case 104: break;
          case 47:
            { return CStarTypes.WITH;
            }
          // fall through
          case 105: break;
          case 48:
            { return CStarTypes.MARCH;
            }
          // fall through
          case 106: break;
          case 49:
            { return CStarTypes.PRINT;
            }
          // fall through
          case 107: break;
          case 50:
            { return CStarTypes.TRUTH;
            }
          // fall through
          case 108: break;
          case 51:
            { return CStarTypes.OOPSIE;
            }
          // fall through
          case 109: break;
          case 52:
            { return CStarTypes.SELECT;
            }
          // fall through
          case 110: break;
          case 53:
            { return CStarTypes.WHILST;
            }
          // fall through
          case 111: break;
          case 54:
            { return CStarTypes.ATTEMPT;
            }
          // fall through
          case 112: break;
          case 55:
            { return CStarTypes.LITERAL;
            }
          // fall through
          case 113: break;
          case 56:
            { return CStarTypes.PERHAPS;
            }
          // fall through
          case 114: break;
          case 57:
            { return CStarTypes.SUPPOSE;
            }
          // fall through
          case 115: break;
          case 58:
            { return CStarTypes.BUMPINGTHAT;
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
